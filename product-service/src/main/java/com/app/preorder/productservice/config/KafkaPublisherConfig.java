package com.app.preorder.productservice.config;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaPublisherConfig {

    private Map<String, Object> baseProps(String bootstrap) {
        Map<String, Object> props = new HashMap<>();
        // Í∏∞Î≥∏
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrap);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        props.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, false); // ÌÉÄÏûÖ Ìó§Îçî OFF (Ïª®ÏäàÎ®∏ Ï†ÑÎûµÍ≥º Îß§Ïπ≠)

        // Ïã†Î¢∞ÏÑ±
        props.put(ProducerConfig.ACKS_CONFIG, "all");
        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);
        props.put(ProducerConfig.RETRIES_CONFIG, 10);
        props.put(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG, 30_000);

        // üîπ Í∂åÏû• Î≥¥Í∞ï(ÏÑ±Îä•/ÏïàÏ†Ñ)
        props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 5); // idemÍ≥º Ï°∞Ìï© ÏïàÏ†Ñ
        props.put(ProducerConfig.LINGER_MS_CONFIG, 10);                      // ÏÜåÎüâ Î≤ÑÌçºÎßÅ
        props.put(ProducerConfig.BATCH_SIZE_CONFIG, 65_536);                 // ~64KiB
        props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, "lz4");            // Ï†ÑÏÜ°Îüâ‚Üì Ï≤òÎ¶¨Îüâ‚Üë
        props.put(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, 15_000);         // ÌÉÄÏûÑÏïÑÏõÉ Î™ÖÏãú

        return props;
    }

    @Bean
    @Primary
    public ProducerFactory<Object, Object> genericProducerFactory(
            @Value("${spring.kafka.bootstrap-servers:kafka:9092}") String bootstrap
    ) {
        return new DefaultKafkaProducerFactory<>(baseProps(bootstrap));
    }

    @Bean
    @Primary
    public KafkaTemplate<Object, Object> kafkaTemplate(ProducerFactory<Object, Object> pf) {
        return new KafkaTemplate<>(pf);
    }
}
