server:
  port: 8086

spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      discovery:
        locator:
          enabled: false

      httpclient:
        connect-timeout: 2000
        response-timeout: 4s

      routes:
        # 0) 내부 API 차단
        - id: block-internal
          uri: no://op
          predicates:
            - Path=/api/internal/**
          filters:
            - name: SetStatus
              args: { status: 403 }

        # 1) Product — CB + QoS
        - id: product
          uri: lb://product-service
          predicates:
            - Path=/api/products/**
          filters:
            - name: CircuitBreaker
              args:
                name: productCB
                fallbackUri: forward:/__fallback
                statusCodes: [500,502,503,504]
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 400
                redis-rate-limiter.burstCapacity: 800

        # 2) Order — CB + QoS
        - id: order
          uri: lb://order-service
          predicates:
            - Path=/api/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCB
                fallbackUri: forward:/__fallback
                statusCodes: [500,502,503,504]
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 400

        # 3) Auth — QoS만
        - id: auth
          uri: lb://auth-service
          predicates:
            - Path=/api/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 300
                redis-rate-limiter.burstCapacity: 600

        # 4) Members — QoS만
        - id: member
          uri: lb://member-service
          predicates:
            - Path=/api/members/**
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 300
                redis-rate-limiter.burstCapacity: 600

        # 5) Cart — cart/carts 둘 다
        - id: cart
          uri: lb://cart-service
          predicates:
            - Path=/api/carts/**
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 400

resilience4j:
  circuitbreaker:
    instances:
      productCB:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 20
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 1s
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 5
        recordExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - io.netty.channel.ConnectTimeoutException
          - reactor.netty.http.client.PrematureCloseException
          - org.springframework.cloud.gateway.support.TimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.reactive.function.client.WebClientResponseException
      orderCB:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 50
        minimumNumberOfCalls: 20
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 1s
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 5
        recordExceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - io.netty.channel.ConnectTimeoutException
          - reactor.netty.http.client.PrematureCloseException
          - org.springframework.cloud.gateway.support.TimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.reactive.function.client.WebClientResponseException

  timelimiter:
    instances:
      productCB:
        timeoutDuration: 4s
      orderCB:
        timeoutDuration: 4s
