plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.app.preorder'
version = '0.0.1-SNAPSHOT'

java {
	toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

ext {
	// ★ Spring Cloud BOM (Boot 3.2.x 호환)
	set('springCloudVersion', '2023.0.2')
}

dependencies {
	// Spring Boot / WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Spring Cloud (Gateway / Discovery / CircuitBreaker)
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'

	// Reactive Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

	// Actuator + Prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly   'io.micrometer:micrometer-registry-prometheus'

	// 내부 공용 모듈
	implementation project(':common-lib')

	// 개발 편의 (Configuration metadata)
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	// ★ Spring Cloud 의존성 버전 정렬(권장)
	imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" }
}

tasks.named('test') { useJUnitPlatform() }

tasks.named('bootJar') {
	it.mainClass.set('com.app.preorder.gatewayservice.GatewayServiceApplication')
	it.archiveFileName = 'app.jar'
}

tasks.named('jar') { enabled = false }
