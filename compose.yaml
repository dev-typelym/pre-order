version: '3.8'

services:
  mariadb:
    image: mariadb:10.5.5
    container_name: mariadb
    ports: ["3307:3306"]
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: preorder
      MYSQL_USER: taek
      MYSQL_PASSWORD: 1234
      TZ: Asia/Seoul
    volumes:
      - ./mariadb/data:/var/lib/mysql
      - ./mariadb/config:/etc/mysql/conf.d
    command: >
      --character-set-server=utf8mb4
      --max_connections=500
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $$MYSQL_USER -p$$MYSQL_PASSWORD --silent"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    ports: ["6379:6379"]
    environment: [ "TZ=Asia/Seoul" ]
    volumes: [ "redis_data:/data" ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - TZ=Asia/Seoul
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
    ports: ["9094:9094"]
    volumes: [ "kafka_data:/bitnami/kafka" ]
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  discovery-service:
    build: { context: ./discovery-service }
    container_name: discovery-service
    ports: ["8761:8761"]
    environment: [ "TZ=Asia/Seoul" ]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  gateway-service:
    build: { context: ./gateway-service }
    container_name: gateway-service
    ports: ["8087:8087"]
    environment:
      - TZ=Asia/Seoul
      - SERVER_PORT=8087
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    depends_on:
      discovery-service: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: unless-stopped

  auth-service:
    build: { context: ./auth-service }
    ports: ["8081:8081"]
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - AES_KEY=${AES_KEY}
      - AES_SALT=${AES_SALT}
      - HMAC_SECRET_KEY=${HMAC_SECRET_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=6
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=0
    depends_on:
      mariadb: { condition: service_healthy }
      redis: { condition: service_healthy }
      discovery-service: { condition: service_healthy }
    restart: unless-stopped

  member-service:
    build: { context: ./member-service }
    ports: ["8082:8082"]
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - AES_KEY=${AES_KEY}
      - AES_SALT=${AES_SALT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - EMAIL_AUTO_VERIFY=${EMAIL_AUTO_VERIFY}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=6
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=0
    depends_on:
      mariadb: { condition: service_healthy }
      redis: { condition: service_healthy }
      auth-service: { condition: service_started }
      discovery-service: { condition: service_healthy }
      kafka: { condition: service_healthy }
    restart: unless-stopped

  cart-service:
    build: { context: ./cart-service }
    ports: ["8083:8083"]
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - JWT_SECRET=${JWT_SECRET}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=6
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=0
    depends_on:
      mariadb: { condition: service_healthy }
      redis: { condition: service_healthy }
      member-service: { condition: service_started }
      discovery-service: { condition: service_healthy }
      kafka: { condition: service_healthy }
    restart: unless-stopped

  order-service:
    build: { context: ./order-service }
    ports: ["8084:8084"]
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=${JWT_SECRET}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
      # ▲ 주력: order 60/10
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=60
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - HIKARI_MAX_POOL_SIZE=60
      - HIKARI_MIN_IDLE=10
    depends_on:
      mariadb: { condition: service_healthy }
      redis: { condition: service_healthy }
      member-service: { condition: service_started }
      discovery-service: { condition: service_healthy }
      kafka: { condition: service_healthy }
    restart: unless-stopped

  product-service:
    build: { context: ./product-service }
    ports: ["8085:8085"]
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - TZ=Asia/Seoul
      # ▲ product 60/10
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=60
      - SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=10
      - HIKARI_MAX_POOL_SIZE=60
      - HIKARI_MIN_IDLE=10
    depends_on:
      mariadb: { condition: service_healthy }
      redis: { condition: service_healthy }
      discovery-service: { condition: service_healthy }
      kafka: { condition: service_healthy }
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports: ["8086:8086"]
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes: [ "influxdb_data:/var/lib/influxdb2" ]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports: ["3000:3000"]
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      influxdb: { condition: service_healthy }
    volumes: [ "grafana_data:/var/lib/grafana" ]
    restart: unless-stopped

volumes:
  redis_data:
  kafka_data:
  influxdb_data:
  grafana_data:
